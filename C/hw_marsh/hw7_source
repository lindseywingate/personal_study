/********************************************************/
/* In this solution I pass the head by reference and by */
/* value. Either case will work for either function. I  */
/* Just wanted to show both methods in one solution.    */
/********************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct _node {
   char name[42];
   struct _node *next;
};

typedef struct _node LINK;

/********************************************************/
/* SEARCH LINKED-LIST.                                  */
/********************************************************/
int searchList(char name[], LINK *head) {
LINK *current;
   current = head;
   while (current != NULL) {
      if (!strcmp(current->name, name)) return 1;
      current = current->next;
   }
   return 0;
}

/********************************************************/
/* INSERT LINKED-LIST.                                  */
/* In this example I am passing the head by value and   */
/* returning any change via the function return.        */
/********************************************************/
LINK *insertIntoList(char name[], LINK *head) {
LINK *current, *temp;
    // Does name already exist in list?
    if (searchList(name, head) == 1) return head;	
    // Case 1: List is empty. Add to front.
    if (head == NULL) {	
//printf("Case 1: %s\n", name);
       temp = (LINK *)malloc(sizeof(LINK));
       strcpy(temp->name, name);
       head           = temp;
       temp->next  = NULL; 
       return head;  
    } 
    // Case 2: Add to front of list.
    current = head;
    if (strcmp(current->name, name) > 0) {	
//printf("Case 2: %s\n", name);
       temp = (LINK *)malloc(sizeof(LINK));
       strcpy(temp->name, name);
       temp->next  = current; 
       head        = temp;
       return head;  
    } 
    // Case 3: Add to end/middle of list.
    current = head;
    while (current != NULL) {
       if (current->next == NULL || strcmp(current->next->name, name) > 0) {
//printf("Case 3: %s\n", name);
          temp = (LINK *)malloc(sizeof(LINK));
          strcpy(temp->name, name);
          temp->next = current->next;
          current->next = temp;
          return head;  
       }
       current = current->next;
    }
}

/********************************************************/
/* DELETE LINKED-LIST.                                  */
/* In this example I am passing the head by reference.  */
/********************************************************/
void deleteFromList(char name[], LINK *(*head)) {
LINK *current, *temp;
   // Does name exist in list?
   if (searchList(name, (*head)) == 0) return;
   current = (*head);
   // Handle special case of first node removal.
   if (!strcmp((*head)->name, name)) {	
      current = current->next;
      free((*head));
      (*head) = current;
   } else {
   // Remainder of list removal.
      while (current->next != NULL) {	
          if (!strcmp(current->next->name, name)) {
             temp = current->next;
             current->next = current->next->next;
             free(temp);
             break;			// Since there will only be 1 instance.
          }
          current = current->next;
      }
   }
}

/********************************************************/
/* DISPLAY LINKED-LIST.                                 */
/********************************************************/
void displayList(LINK *head) {
int i;
LINK *current;
    current = head;
    while (current != NULL) {
        printf("%s\n", current->name);
        current = current->next;
    } 
}

/********************************************************/
/* FREE LINKED-LIST.                                    */
/********************************************************/
LINK *freeList(LINK *head) {
LINK *current, *temp;
    current = head;
    while (current != NULL) {
        temp    = current;
        current = current->next;
        free(temp);
    }
    free(head);
    head = NULL;
    return head;
}

/********************************************************/
/* MAIN                                                 */
/********************************************************/
int main(void) {
char action, name[42];
FILE *stream;
LINK *head;
    // Initialize head.
    head = NULL;
    // Read data from file.
    stream = fopen("hw7.data", "r");
    while (1) {
       fscanf(stream, "%s %c", name, &action);
       if (feof(stream)) break;
       if (action == 'a') {
          head = insertIntoList(name, head);
       } else if (action == 'd') {
          deleteFromList(name, &head);
       }
    } 
    fclose(stream);
    // Display list.
    displayList(head);
    // Free list.
    head = freeList(head);
    head = NULL;
    return 0;
}
